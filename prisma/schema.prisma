generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Item {
    id                 String               @id @default(auto()) @map("_id") @db.ObjectId
    createDate         DateTime             @default(now())
    updateDate         DateTime             @updatedAt
    name               String
    image              String?
    LocationItemDetail LocationItemDetail[]
    user               User                 @relation(fields: [userId], references: [id])
    userId             String               @db.ObjectId
    itemBarcode        itemBarcode[]
    itemTag            ItemTags?            @relation(fields: [itemTagsId], references: [id])
    itemTagsId         String?              @db.ObjectId
}

model ItemTags {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    user   User   @relation(fields: [userId], references: [id])
    userId String @db.ObjectId
    Item   Item[]
}

model Location {
    id         String               @id @default(auto()) @map("_id") @db.ObjectId
    createDate DateTime             @default(now())
    updateDate DateTime             @updatedAt
    name       String?
    items      LocationItemDetail[]
    user       User                 @relation(fields: [userId], references: [id])
    userId     String               @db.ObjectId
}

model LocationItemDetail {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    createDate DateTime  @default(now())
    updateDate DateTime  @updatedAt
    locationId String?   @db.ObjectId
    itemId     String    @db.ObjectId
    quantity   Int
    item       Item      @relation(fields: [itemId], references: [id])
    location   Location? @relation(fields: [locationId], references: [id])
    user       User      @relation(fields: [userId], references: [id])
    userId     String    @db.ObjectId

    @@index([itemId])
    @@index([locationId])
}

model itemBarcode {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    barcodeQr String
    user      User   @relation(fields: [userId], references: [id])
    userId    String @db.ObjectId
    Item      Item   @relation(fields: [itemId], references: [id])
    itemId    String @db.ObjectId
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String               @id @default(auto()) @map("_id") @db.ObjectId
    name               String?
    email              String?              @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    Item               Item[]
    Location           Location[]
    LocationItemDetail LocationItemDetail[]
    itemBarcode        itemBarcode[]
    ItemTags           ItemTags[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
